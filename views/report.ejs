<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" rel="stylesheet">
        <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"></script>
        <link href="/static/favicon.ico" rel="icon">
        <link href="/styles.css" rel="stylesheet">
        <link rel="stylesheet" type="text/css" href="/mapstyles.css" />
        <title>Declare Emergency</title>
    </head>
<body>
    <%- include('./partials/header.ejs') %>

<form id="emergencyForm" class="registration container mt-5 p-4 border rounded" action="/declare" method="POST">
    
    <label class="form-label">Declare an Emergency</label>

    <div class="mb-3"></div>
        <label class="form-label" style="margin-right: 10px;">Reporting an </label>
        <input class="form-check-input" type="radio" id="emergency_option" name="report_type" value="emergency" required>
        <label class="form-check-label" for="emergency_option">Emergency </label>
        <input class="form-check-input" type="radio" id="non_emergency_option" name="report_type" value="non_emergency" required>
        <label class="form-check-label" for="non_emergency_option">Non-Emergency</label>
        <div>
            <small id="emergencyFeedback"></small>
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Current Status of Report</label>
          
        <input class="form-check-input" type="radio" id="active_option" name="status" value="active" required>
        <label class="form-check-label" for="active_option">Active</label>

        <input class="form-check-input" type="radio" id="inactive_option" name="status" value="inactive" required>
        <label class="form-check-label" for="inactive_option">Inactive</label>

        <input class="form-check-input" type="radio" id="other_option" name="status" value="other" required>
        <label class="form-check-label" for="other_option">Other</label>
    </div>
    
    <div class="mb-3">
        <label class="form-label">Public or Private</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="public_posting_option" name="posting_type" value="public" required>
            <label class="form-check-label" for="public_posting_option">Public Posting</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="private_posting_option" name="posting_type" value="private" required>
            <label class="form-check-label" for="private_posting_option">Private / Sent to Authorities</label>
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Privacy Setting</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="anonymous_privacy_option" name="privacy_type" value="anonymous" required>
            <label class="form-check-label" for="anonymous_privacy_option">Anonymous</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="public_privacy_option" name="privacy_type" value="public" required>
            <label class="form-check-label" for="public_privacy_option">Public</label>
        </div>
    </div>

    <div class="mb-3">
        
        <label class="form-label">Location Type</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="address_option" name="location_type" value="address_option" required>
            <label class="form-check-label" for="address_option">Address</label>
        </div>
        <!--LOCATION SELECTION-->
        <div id="addressField" class="hidden specific">
            <input type="text" id="addressInput" name="address"><br>
        </div>
        
        <div class="form-check">
            <input class="form-check-input" type="radio" id="map_option" name="location_type" value="map_option" required>
            <label class="form-check-label" for="map_option">Location on Map</label>
        </div>
        <!--MAP SELECTION-->
        <div id="mapField" class="hidden specific " style="height: 400px;"></div>

        <div class="form-check">
            <input class="form-check-input" type="radio" id="my_location_option" name="location_type" value="my_location_option" required>
            <label class="form-check-label" for="my_location_option">My Location</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="no_location_option" name="location_type" value="no_location_option" required>
            <label class="form-check-label" for="no_location_option">No Location Found/Possible</label>
        </div>
    </div>


    <div class="mb-3">
        
        <label class="form-label">Event Type</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="shooting_event" name="event_type" value="school_shooting" required>
            <label class="form-check-label" for="shooting_event">School Shooting</label>
        </div>
        
        <div class="form-check">
            <input class="form-check-input" type="radio" id="fire_event" name="event_type" value="fire / property damage" required>
            <label class="form-check-label" for="fire_event">Fire / Property Danger </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="assault_event" name="event_type" value="assault / violent attacks" required>
            <label class="form-check-label" for="assault_event">Assault / Violent Attacks</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="other_event" name="event_type" value="other" required>
            <label class="form-check-label" for="other_event">Other</label>
        </div>
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <input type="text" class="form-control" id="description" name="description" placeholder="Description of Emergency" required>
    </div>
    
    <button type="submit" class="btn btn-primary">Declare Emergency</button>
</form>


    <%- include('./partials/footer.ejs') %>
    
    
    <!--<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initAutocomplete" async defer> </script>-->
    <script>
        
        //different values to store from getting user from checkUser when page loads
        const apiKey = "<%= process.env.GOOGLE_API_KEY %>";
        const user_school = "<%= user.school_uid %>";
        const user_uid = "<%= user.person_uid %>";
        const user_type = "<%= user.user_type %>";

        let currMapLoc;
        console.log("user_school" + JSON.stringify(user_school));
    
        (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
        ({key: apiKey, v: "weekly"});

        //different fields open up by clicking location type
        //TODO : handle different location types
        document.querySelectorAll('input[name="location_type"]').forEach(radio => {
            radio.addEventListener('change', function() {
                // Hide all specific fields
                document.getElementById('addressField').classList.add('hidden');
                document.getElementById('mapField').classList.add('hidden');
                

                // Show relevant fields based on user type
                if (this.value === 'address_option') {
                    document.getElementById('addressField').classList.remove('hidden');
                } else if (this.value === 'map_option') {
                    document.getElementById('mapField').classList.remove('hidden');
                } 
            });
        });

        async function initMap() {
        
        // Request needed libraries.
        const { Map } = await google.maps.importLibrary("maps");
        //gets school coordinates
        const result = await fetch(`/getSchoolCoordinates`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ school_uid: user_school })
        });
        const schoolLatlng = await result.json();
        //school map center
        const mapCenter = {
            lat: schoolLatlng.st_y,
            lng: schoolLatlng.st_x
        };
        currMapLoc = mapCenter;
        //maps to school
        const map = new google.maps.Map(document.getElementById("mapField"), {
            zoom: 15,
            center: mapCenter,
        });
        // Create the initial InfoWindow.
        let infoWindow = new google.maps.InfoWindow({
            content: "Map the current location of the emergency!",
            position: mapCenter,
        });

        infoWindow.open(map);
        // Configure the click listener.
        map.addListener("click", (mapsMouseEvent) => {
            // Close the current InfoWindow.
            infoWindow.close();
            currMapLoc = mapsMouseEvent.latLng;
            console.log("new long,lat:" + currMapLoc);
            // Create a new InfoWindow.
            infoWindow = new google.maps.InfoWindow({
            position: mapsMouseEvent.latLng,
            });
            infoWindow.setContent(
            JSON.stringify(mapsMouseEvent.latLng.toJSON(), null, 2),
            );
            infoWindow.open(map);
        });
        }

        initMap();

        //submitting the data
        document.getElementById('emergencyForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent the default form submission
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData.entries());

            //initial output data from form
            const outputData = { school_uid: user_school, status: data.status, event_type: data.event_type, 
                                 description: data.description, geom: currMapLoc, location_type: data.location_type, 
                                 posting_type: data.posting_type, privacy_type: data.privacy_type };
            //checks if administrator, if administrator automatically verified
            if(user_type == "administrator") {
                outputData.verified = true;
            } else {
                outputData.verified = false;
            }
            //checks if emergency
            if(data.report_type == "emergency") {
                outputData.emergency = true;
            } else {
                outputData.emergency = false;
            }
            //checks if anonymous report or not
            if(data.privacy_type !== "anonymous") {
                outputData.person_uid = user_uid;
            } else {
                outputData.person_uid = '00000000-0000-0000-0000-000000000000';
            }
            //attempts to post to db
            try {
                const res = await fetch('/report', {
                    method: 'POST',
                    body: JSON.stringify(outputData),
                    headers: {'Content-Type': 'application/json' }
                });

                const response = await res.json();

                if(res.ok) {
                    alert(`Emergency has been declared!`);
                    window.location.href = '/';
                } else {
                    alert(response.message || 'Emergency Declaration Failed. Please try again.');
                }
            }
            catch (err) {
                console.error(err);
            }

        });

        //effect of user clicking on emergency or non-emergency on report form
        const emergencyOption = document.getElementById('emergency_option');
        const nonEmergencyOption = document.getElementById('non_emergency_option');
        const emergencyFeedback = document.getElementById('emergencyFeedback');
        function updateFeedback() {
            if (emergencyOption.checked) {
                emergencyFeedback.textContent = 'These threats involve police & are taken seriously.';
                emergencyFeedback.style.color = 'red';
            } else if (nonEmergencyOption.checked) {
                emergencyFeedback.textContent = 'You are reporting a non-immediate emergency below.';
                emergencyFeedback.style.color = 'orange';
            } else {
                emergencyFeedback.textContent = ''; // Clear feedback if neither is selected
            }
        }
        emergencyOption.addEventListener('change', updateFeedback);
        nonEmergencyOption.addEventListener('change', updateFeedback);



        

        
    </script>
</body>
</html>